<?php
/* 
 * Generated by CRUDigniter v3.0 Beta 
 * www.crudigniter.com
 */
 
class Escalator extends MY_Controller
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Escalator_model');
    } 

    /*
     * Listing of escalator
     */
    function index()
    {
        $data['escalator'] = $this->Escalator_model->get_all_escalator();

        $this->load->view('escalator/index',$data);
    }

    /*
     * Adding a new escalator
     */
    function add()
    {   
        if(isset($_POST) && count($_POST) > 0)     
        {   
            $params = array(
				'lid' => $this->input->post('lid'),
				'location' => $this->input->post('location'),
				'product_code' => $this->input->post('product_code'),
				'product_supportor' => $this->input->post('product_supportor'),
				'product_contact' => $this->input->post('product_contact'),
				'product_service' => $this->input->post('product_service'),
				'product_serviceman' => $this->input->post('product_serviceman'),
				'product_nextcheck' => $this->input->post('product_nextcheck'),
				'p_contract' => $this->input->post('p_contract'),
				'p_customer' => $this->input->post('p_customer'),
				'p_type' => $this->input->post('p_type'),
				'p_stepwidth' => $this->input->post('p_stepwidth'),
				'p_stepangle' => $this->input->post('p_stepangle'),
				'p_maxspeed' => $this->input->post('p_maxspeed'),
				'p_high' => $this->input->post('p_high'),
				'p_dragtype' => $this->input->post('p_dragtype'),
				'p_controlscreen' => $this->input->post('p_controlscreen'),
				'p_date' => $this->input->post('p_date'),
				'register_id' => $this->input->post('register_id'),
				'register_code' => $this->input->post('register_code'),
				'register_com' => $this->input->post('register_com'),
				'register_type' => $this->input->post('register_type'),
				'register_model' => $this->input->post('register_model'),
				'register_maker' => $this->input->post('register_maker'),
				'register_licence' => $this->input->post('register_licence'),
				'register_pid' => $this->input->post('register_pid'),
				'register_lid' => $this->input->post('register_lid'),
				'register_copy' => $this->input->post('register_copy'),
				'preparer' => $this->input->post('preparer'),
				'submitor' => $this->input->post('submitor'),
				'submit_date' => $this->input->post('submit_date'),
				'update_date' => $this->input->post('update_date'),
				'station_id' => $this->input->post('station_id'),
            );
            
            $escalator_id = $this->Escalator_model->add_escalator($params);
            redirect('escalator/index');
        }
        else
        {
            $this->load->view('escalator/add');
        }
    }  

    /*
     * Editing a escalator
     */
    function edit($id)
    {   
        // check if the escalator exists before trying to edit it
        $data['escalator'] = $this->Escalator_model->get_escalator($id);
        
        if(isset($data['escalator']['id']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {   
                $params = array(
					'lid' => $this->input->post('lid'),
					'location' => $this->input->post('location'),
					'product_code' => $this->input->post('product_code'),
					'product_supportor' => $this->input->post('product_supportor'),
					'product_contact' => $this->input->post('product_contact'),
					'product_service' => $this->input->post('product_service'),
					'product_serviceman' => $this->input->post('product_serviceman'),
					'product_nextcheck' => $this->input->post('product_nextcheck'),
					'p_contract' => $this->input->post('p_contract'),
					'p_customer' => $this->input->post('p_customer'),
					'p_type' => $this->input->post('p_type'),
					'p_stepwidth' => $this->input->post('p_stepwidth'),
					'p_stepangle' => $this->input->post('p_stepangle'),
					'p_maxspeed' => $this->input->post('p_maxspeed'),
					'p_high' => $this->input->post('p_high'),
					'p_dragtype' => $this->input->post('p_dragtype'),
					'p_controlscreen' => $this->input->post('p_controlscreen'),
					'p_date' => $this->input->post('p_date'),
					'register_id' => $this->input->post('register_id'),
					'register_code' => $this->input->post('register_code'),
					'register_com' => $this->input->post('register_com'),
					'register_type' => $this->input->post('register_type'),
					'register_model' => $this->input->post('register_model'),
					'register_maker' => $this->input->post('register_maker'),
					'register_licence' => $this->input->post('register_licence'),
					'register_pid' => $this->input->post('register_pid'),
					'register_lid' => $this->input->post('register_lid'),
					'register_copy' => $this->input->post('register_copy'),
					'preparer' => $this->input->post('preparer'),
					'submitor' => $this->input->post('submitor'),
					'submit_date' => $this->input->post('submit_date'),
					'update_date' => $this->input->post('update_date'),
					'station_id' => $this->input->post('station_id'),
                );

                $this->Escalator_model->update_escalator($id,$params);            
                redirect('escalator/index');
            }
            else
            {
                $this->load->view('escalator/edit',$data);
            }
        }
        else
            show_error('The escalator you are trying to edit does not exist.');
    } 


    public function view($id)
    {
        $data['escalator'] = $this->Escalator_model->get_escalator($id);
        $this->load->view('escalator/detail',$data);
    }

    /*
     * Deleting escalator
     */
    function remove($id)
    {
        $escalator = $this->Escalator_model->get_escalator($id);

        // check if the escalator exists before trying to delete it
        if(isset($escalator['id']))
        {
            $this->Escalator_model->delete_escalator($id);
            redirect('escalator/index');
        }
        else
            show_error('The escalator you are trying to delete does not exist.');
    }
    
}
