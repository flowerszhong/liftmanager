<?php
/* 
 * Generated by CRUDigniter v3.0 Beta 
 * www.crudigniter.com
 */
 
class Elevator extends MY_Controller
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Elevator_model');
    } 

    /*
     * Listing of elevator
     */
    function index()
    {
        $get = $this->input->get();
        $base_url = site_url('elevator/index',null);
        $config = $this->config_pagination($base_url,$get);
        $page = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
        $data['elevator'] = $this->Elevator_model->record_query($get,$config['per_page'],$page);

        $this->load->view('elevator/index',$data);
    }

    /*
     * Adding a new elevator
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->add_validation();
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'lid' => $this->input->post('lid'),
				'location' => $this->input->post('location'),
				'code' => $this->input->post('code'),
				'product_contract' => $this->input->post('product_contract'),
				'product_orderer' => $this->input->post('product_orderer'),
				'product_id' => $this->input->post('product_id'),
				'product_date' => $this->input->post('product_date'),
				'product_name' => $this->input->post('product_name'),
				'product_driver' => $this->input->post('product_driver'),
				'product_type' => $this->input->post('product_type'),
				'product_os' => $this->input->post('product_os'),
				'product_maxweight' => $this->input->post('product_maxweight'),
				'product_speed' => $this->input->post('product_speed'),
				'product_doortype' => $this->input->post('product_doortype'),
				'product_doornum' => $this->input->post('product_doornum'),
				'product_boxsize' => $this->input->post('product_boxsize'),
				'register_id' => $this->input->post('register_id'),
				'register_code' => $this->input->post('register_code'),
				'register_com' => $this->input->post('register_com'),
				'register_type' => $this->input->post('register_type'),
				'register_model' => $this->input->post('register_model'),
				'register_maker' => $this->input->post('register_maker'),
				'register_licence' => $this->input->post('register_licence'),
				'register_pid' => $this->input->post('register_pid'),
				'register_lid' => $this->input->post('register_lid'),
				'register_copy' => $this->input->post('register_copy'),
				'preparer' => $this->input->post('preparer'),
                'submitor' => $this->admin_id,
				'submit_date' => date('Y-m-d H:i:s'),
				'station_id' => $this->admin_station,
            );
            
            $elevator_id = $this->Elevator_model->add_elevator($params);
            redirect('elevator/index');
        }
        else
        {
            $this->load->view('elevator/add');
        }
    }  

    public function add_validation()
    {
    	$this->form_validation->set_rules('lid','Lid','required|max_length[15]');
    	$this->form_validation->set_rules('location','Location','required|max_length[40]');
    	$this->form_validation->set_rules('code','Code','max_length[40]');
    	$this->form_validation->set_rules('product_contract','Product Contract','max_length[40]');
    	$this->form_validation->set_rules('product_orderer','Product Orderer','max_length[40]');
    	$this->form_validation->set_rules('product_id','Product Id','max_length[20]');
    	$this->form_validation->set_rules('product_name','Product Name','max_length[20]');
    	$this->form_validation->set_rules('product_driver','Product Driver','max_length[40]');
    	$this->form_validation->set_rules('product_type','Product Type','max_length[20]');
    	$this->form_validation->set_rules('product_os','Product Os','max_length[20]');
    	$this->form_validation->set_rules('product_maxweight','Product Maxweight','integer');
    	$this->form_validation->set_rules('product_speed','Product Speed','integer');
    	$this->form_validation->set_rules('product_doortype','Product Doortype','max_length[20]');
    	$this->form_validation->set_rules('product_doornum','Product Doornum','max_length[20]');
    	$this->form_validation->set_rules('product_boxsize','Product Boxsize','max_length[20]');
    	$this->form_validation->set_rules('register_id','Register Id','max_length[30]');
    	$this->form_validation->set_rules('register_code','Register Code','max_length[30]');
    	$this->form_validation->set_rules('register_com','Register Com','max_length[20]');
    	$this->form_validation->set_rules('register_type','Register Type','max_length[20]');
    	$this->form_validation->set_rules('register_model','Register Model','max_length[30]');
    	$this->form_validation->set_rules('register_maker','Register Maker','max_length[30]');
    	$this->form_validation->set_rules('register_licence','Register Licence','max_length[30]');
    	$this->form_validation->set_rules('register_pid','Register Pid','max_length[30]');
    	$this->form_validation->set_rules('register_lid','Register Lid','max_length[30]');
    	$this->form_validation->set_rules('register_copy','Register Copy','max_length[40]');
    	$this->form_validation->set_rules('preparer','Preparer','max_length[20]');
    	$this->form_validation->set_rules('submitor','Submitor','max_length[20]');
    	$this->form_validation->set_rules('station_id','Station Id','integer');
    }

    /*
     * Editing a elevator
     */
    function edit($id)
    {   
        // check if the elevator exists before trying to edit it
        $data['elevator'] = $this->Elevator_model->get_elevator($id);
        
        if(isset($data['elevator']['id']))
        {
            $this->load->library('form_validation');

			$this->add_validation();
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'lid' => $this->input->post('lid'),
					'location' => $this->input->post('location'),
					'code' => $this->input->post('code'),
					'product_contract' => $this->input->post('product_contract'),
					'product_orderer' => $this->input->post('product_orderer'),
					'product_id' => $this->input->post('product_id'),
					'product_date' => $this->input->post('product_date'),
					'product_name' => $this->input->post('product_name'),
					'product_driver' => $this->input->post('product_driver'),
					'product_type' => $this->input->post('product_type'),
					'product_os' => $this->input->post('product_os'),
					'product_maxweight' => $this->input->post('product_maxweight'),
					'product_speed' => $this->input->post('product_speed'),
					'product_doortype' => $this->input->post('product_doortype'),
					'product_doornum' => $this->input->post('product_doornum'),
					'product_boxsize' => $this->input->post('product_boxsize'),
					'register_id' => $this->input->post('register_id'),
					'register_code' => $this->input->post('register_code'),
					'register_com' => $this->input->post('register_com'),
					'register_type' => $this->input->post('register_type'),
					'register_model' => $this->input->post('register_model'),
					'register_maker' => $this->input->post('register_maker'),
					'register_licence' => $this->input->post('register_licence'),
					'register_pid' => $this->input->post('register_pid'),
					'register_lid' => $this->input->post('register_lid'),
					'register_copy' => $this->input->post('register_copy'),
					'preparer' => $this->input->post('preparer'),
                );

                $this->Elevator_model->update_elevator($id,$params);            
                redirect('elevator/index');
            }
            else
            {
                $this->load->view('elevator/edit',$data);
            }
        }
        else
            show_error('The elevator you are trying to edit does not exist.');
    } 


    public function view($id)
    {
        $data['elevator'] = $this->Elevator_model->get_elevator($id);
        $this->load->view('elevator/view',$data);
    }

    /*
     * Deleting elevator
     */
    function remove($id)
    {
        $elevator = $this->Elevator_model->get_elevator($id);

        // check if the elevator exists before trying to delete it
        if(isset($elevator['id']))
        {
            $this->Elevator_model->delete_elevator($id);
            redirect('elevator/index');
        }
        else
            show_error('The elevator you are trying to delete does not exist.');
    }

    public function config_pagination($base_url,$get)
    {
        $this->load->library('pagination');
        $config = array();
        // $this->config->load('pagination');
        $config["base_url"] = $base_url;
        if (count($get) > 0) {
            $config['suffix'] = '?' . http_build_query($get, '', "&");
        }
        $config['first_url'] = $base_url . '?' . http_build_query($get, '', "&");
        $config["total_rows"] = $this->Elevator_model->record_count($get);
        $config["per_page"] = 3;
        $config["uri_segment"] = 3;
        $config['use_page_numbers'] = TRUE;

        $this->pagination->initialize($config);

        return $config;
    }
    
}
